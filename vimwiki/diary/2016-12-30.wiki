= December 30th =

= Contents =
    - [[#December 30th|December 30th]]
        - [[#December 30th#Variational Autoencoders|Variational Autoencoders]]
        - [[#December 30th#Recurse Center|Recurse Center]]
        - [[#December 30th#Functional Programming|Functional Programming]]

== Variational Autoencoders ==
    - [[VAE]] 
    - Tutorials:
        - [[http://kvfrans.com/variational-autoencoders-explained/|Overview]]
        - [[https://arxiv.org/abs/1606.05908|Mathematical]]
    - One of the most popular approaches to unsupervised learning of complicated distributions.
    - Generate synthetic samples from the distribution of given samples.
    - Assuming some latent variables that are forced to have Gaussian distribution.

    - NTS: Any distribution in d dimensions can be generated by taking a set of d variables
      that are normally distributed and mapping them through a sufficiently complicated
      function.

== Recurse Center ==
    - 3 month self-guided school for programmers in NYC.
    - What would I learn if I had 3 months away from work?
        - System design
        - Functional Programming
        - Unit tests
        - DL
        - Visualization
        - Stats
        - 

== Functional Programming ==
    - Practical Introduction by Mary Rose Cook of the Hacker School.
    - [[https://maryrosecook.com/blog/post/a-practical-introduction-to-functional-programming|link]]
    - Guide:
        - _Functional code is characterized by absence of side-effects._
        - Doesn;t rely on data outside the function.
        - Doesn't change data outside the function.
    - Other concepts:
        - *First class functions*
           - Langugages that support first class functions allow functions
             to be treated like other values,
           - i.e. functions can be passed to other functions, returned
             from functions and stored in data structures.
        - *Tail call optimization*
            - A programming language feature in which stack frame
              does not grow with recursive calls.
            - Python does NOT have tail call optimization.
        - *Imperative code*
            - Shows how to do something.
        - *Declarative code*
            - Describes what to do.
            - Main loop is enough to understand the program.
            - For more details, reader can read corresponding function.
            - No more comments. The code describes itself.
        - *Higher Order Functions*
            - Takes another function as input, or
            - Returns a function as output.
        - *Closures*
            - When a function is defined it saves references to the variables it closes over.
            - When a function references a variable, Python looks for it in the
              local variables and the arguments. If it doesn't find it there, it
              looks in the saved references to closed over variables.

